import { useEffect, useState } from "react";
import style from "./IdiomsBlock.module.css";
import Idioma from "../Idioma/Idioma";
import { useGetIdiomsQuery } from "@/store/api";

const PAGE_SIZE = 20; // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø–æ–º–µ–Ω—è–π

const IdiomsBlock = () => {
  const [activeTab, setActiveTab] = useState("popular");

  // üîπ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const [page, setPage] = useState(1);
  const [items, setItems] = useState([]);

  // ‚ö†Ô∏è –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ useGetIdiomsQuery –ø—Ä–∏–Ω–∏–º–∞–µ—Ç { page, limit }
  const { data, isLoading, isFetching, isError, error } = useGetIdiomsQuery({
    page,
    limit: PAGE_SIZE,
  });

  // –õ–æ–≥
  useEffect(() => {
    console.log("–û—Ç–≤–µ—Ç API:", data);
  }, [data]);

  // üîπ –ù–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ‚Äî –∑–∞–º–µ–Ω—è–µ–º, –Ω–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ ‚Äî –¥–æ–∫–ª–µ–∏–≤–∞–µ–º –±–µ–∑ –¥—É–±–ª–µ–π
  useEffect(() => {
    if (!data?.result) return;

    if (page === 1) {
      setItems(data.result);
    } else {
      setItems(prev => {
        const seen = new Set(prev.map(i => i.id));
        const incoming = data.result.filter(i => !seen.has(i.id));
        return [...prev, ...incoming];
      });
    }
  }, [data, page]);

  // üî• –ü–æ–∫–∞ –≥—Ä—É–∑–∏—Ç—Å—è ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
  if (isLoading && page === 1) return <p>Loading idioms...</p>;

  // üî• –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
  if (isError) {
    console.error("API error:", error);
    return <p>Failed to load idioms</p>;
  }

  // üî• –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  const totalPages  = data?.totalPages || 0;
  const totalIdioms = data?.totalIdioms || items.length;
  const currentPage = data?.currentPage || page;
  const canLoadMore = currentPage < totalPages;

  // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "Show more"
  const handleLoadMore = () => {
    if (!canLoadMore || isFetching) return;
    setPage(p => p + 1);
  };

  return (
    <section className={style.section}>
      <h2 className={style.title}>Idioms</h2>

      <div className={style.tabButtons}>
        <button
          className={`${style.tabButton} ${activeTab === "popular" ? style.active : ""}`}
          onClick={() => setActiveTab("popular")}
        >
          Most popular
        </button>
        <button
          className={`${style.tabButton} ${activeTab === "searched" ? style.active : ""}`}
          onClick={() => setActiveTab("searched")}
        >
          Recent search
        </button>
      </div>

      {/* ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –∏–¥–∏–æ–º */}
      <div>
        <Idioma idioms={items} />
      </div>

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      {totalPages > 1 && page !== totalPages && (
        <button
          className={style.more}
          onClick={handleLoadMore}
          disabled={!canLoadMore || isFetching}
        >
          {isFetching ? "Loading..." : "Show more"}
        </button>
      )}
    </section>
  );
};

export default IdiomsBlock;
